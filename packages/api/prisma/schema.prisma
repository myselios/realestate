// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  // Using Supabase which is based on PostgreSQL
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================= //
//        🏢 아파트 도메인
// ================================= //

model Region {
  id           Int         @id @default(autoincrement())
  sido         String // 시/도
  sigungu      String // 시/군/구
  eupmyeondong String // 읍/면/동
  code         String      @unique // 지역 코드
  latitude     Float? // 중심 위도
  longitude    Float? // 중심 경도

  apartments     Apartment[]
  busStops       BusStop[]
  developmentPlans DevelopmentPlan[]
  marketTrends   MarketTrend[]
  populationFlows PopulationFlow[]
  schools         School[]
  hospitals       Hospital[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Apartment {
  id                    String                  @id @default(cuid())
  name                  String
  address               String
  jibunAddress          String
  buildYear             Int
  latitude              Float
  longitude             Float
  regionId              Int
  region                Region                  @relation(fields: [regionId], references: [id])
  transactions          RealEstateTransaction[]
  transportationScore   TransportationScore?
  investmentAnalysis    InvestmentAnalysis?
  portfolios            Portfolio[]

  @@unique([name, jibunAddress])
  @@index([regionId])
}

model RealEstateTransaction {
  id          String   @id @default(cuid())
  apartmentId String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  tradeDate   DateTime
  price       BigInt // 거래 가격
  floor       Int // 층
  area        Float // 전용 면적 (m^2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// ================================= //
//        🚇 교통 도메인
// ================================= //

model SubwayLine {
  id         Int      @id @default(autoincrement())
  lineNumber String // '1호선', '분당선'
  name       String   @unique
  color      String? // 노선 색상 (hex)
  operator   String? // 운영 기관

  stations SubwayStation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubwayStation {
  id               Int      @id @default(autoincrement())
  name             String
  stationCode      String? // 역 코드
  latitude         Float
  longitude        Float
  isTransfer       Boolean  @default(false)

  lineId   Int
  subwayLine SubwayLine @relation(fields: [lineId], references: [id])
  
  transportationScores TransportationScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, lineId])
}

model BusRoute {
  id          Int       @id @default(autoincrement())
  routeNumber String @unique
  routeType   String? // '간선', '지선', '광역'
  startPoint  String?
  endPoint    String?

  stops BusStopRoute[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusStop {
  id        Int      @id @default(autoincrement())
  name      String
  stopId    String?  @unique // 버스정류장 고유ID
  latitude  Float
  longitude Float

  regionId  Int
  region    Region   @relation(fields: [regionId], references: [id])
  routes    BusStopRoute[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusStopRoute {
  busStopId Int
  busRouteId Int

  busStop   BusStop   @relation(fields: [busStopId], references: [id])
  busRoute  BusRoute  @relation(fields: [busRouteId], references: [id])

  @@id([busStopId, busRouteId])
}

model TransportationScore {
  id                       String @id @default(cuid())
  apartmentId              String @unique
  apartment                Apartment @relation(fields: [apartmentId], references: [id])
  busStations              Json
  subwayStations           Json
  
  nearestSubwayDistance    Int? // 가장 가까운 지하철역까지 거리(m)
  nearestSubwayId          Int?
  nearestSubway            SubwayStation? @relation(fields: [nearestSubwayId], references: [id])

  subwayCount_500m         Int      @default(0)
  subwayCount_1km          Int      @default(0)
  busStopCount_300m        Int      @default(0)
  busRouteCount            Int      @default(0)
  totalTransportationScore Int      @default(0)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}


// ================================= //
//      🏗️ 개발/재개발 도메인
// ================================= //

model DevelopmentPlan {
  id                 Int      @id @default(autoincrement())
  planName           String
  description        String
  startDate          DateTime
  endDate            DateTime
  category           String
  status             String
  latitude           Float?
  longitude          Float?
  regionId           Int
  region             Region   @relation(fields: [regionId], references: [id])

  @@index([regionId])
}

// ================================= //
//      📈 시장 동향 도메인
// ================================= //

model MarketTrend {
  id                   Int      @id @default(autoincrement())
  year                 Int
  month                Int
  priceIndex           Float
  transactionVolume    Int
  unsoldInventory      Int
  constructionStarts   Int
  permitsIssued        Int
  regionId             Int
  region               Region   @relation(fields: [regionId], references: [id])

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([year, month, regionId])
}

model PopulationFlow {
  id           Int      @id @default(autoincrement())
  year         Int
  month        Int
  netMigration Int
  regionId     Int
  region       Region   @relation(fields: [regionId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([year, month, regionId])
}

// ================================= //
//      📊 종합 분석 도메인
// ================================= //

model InvestmentAnalysis {
  id                     String    @id @default(cuid())
  apartmentId            String    @unique
  apartment              Apartment @relation(fields: [apartmentId], references: [id])
  
  supplyScore            Int       @default(0) // S - Supply Analysis
  marketScore            Int       @default(0) // M - Market Dynamics
  accessibilityScore     Int       @default(0) // A - Accessibility
  regionalDevScore       Int       @default(0) // R - Regional Development
  trendScore             Int       @default(0) // T - Trend & Sentiment
  amenitiesScore         Int       @default(0) // A - Amenities

  totalInvestmentScore   Int       @default(0)
  
  pricePrediction_1y     BigInt?   // 1년 후 예측 가격
  pricePrediction_3y     BigInt?   // 3년 후 예측 가격
  predictionSummary      String?   // 분석 요약 텍스트
  
  lastAnalyzedAt         DateTime @updatedAt
}

// ================================= //
//        🏫 교육/편의시설 도메인
// ================================= //

model School {
  id          Int      @id @default(autoincrement())
  schoolName  String
  schoolType  String // '초등학교', '중학교', '고등학교'
  latitude    Float
  longitude   Float
  studentCount Int?
  foundingDate DateTime?

  regionId  Int
  region    Region   @relation(fields: [regionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hospital {
  id              Int      @id @default(autoincrement())
  hospitalName    String
  hospitalType    String // '종합병원', '병원', '의원'
  address         String
  latitude        Float
  longitude       Float
  
  regionId  Int
  region    Region   @relation(fields: [regionId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ================================= //
//        👤 사용자 및 포트폴리오
// ================================= //

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  passwordHash  String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  portfolios    Portfolio[]
}

model Portfolio {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  apartmentId   String
  apartment     Apartment   @relation(fields: [apartmentId], references: [id])
  
  memo          String?
  createdAt     DateTime    @default(now())

  @@unique([userId, apartmentId])
}
